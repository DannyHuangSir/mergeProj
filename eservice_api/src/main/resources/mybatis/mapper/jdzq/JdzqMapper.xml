<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.twfhclife.eservice.api.jdzq.dao.JdzqDao">

    <resultMap id="CaseMap" type="com.twfhclife.eservice.api.jdzq.model.CaseVo">
        <result column="PolicyNo" property="policyNo" />
        <result column="PolicyType" property="policyType" />
        <result column="AppName" property="appName" />
        <result column="AppID" property="appId" />
        <result column="AppBirth" property="appBirth" />
        <result column="InsName" property="insName" />
        <result column="InsID" property="insId" />
        <result column="InsBirth" property="insBirth" />
        <result column="TBSubmitDate" property="tBSubmitDate" />
        <result column="BPMCurrentTak" property="bPMCurrentTak" />
        <result column="NoteStatus" property="noteStatus" />
        <result column="StampResult" property="stampResult" />
        <result column="Manager" property="manager" />
        <result column="TransPayDate" property="transPayDate" />
        <result column="PolicyActiveDate" property="policyActiveDate" />
        <result column="PrintDate" property="printDate" />
        <result column="ReviewResult" property="reviewResult" />
        <result column="RFeeApplyDate" property="applyDate" />
        <result column="AccDocNo" property="accDocNo" />
        <result column="PayType" property="payType" />
        <result column="PolicyAmountNTD" property="policyAmountNTD" />
        <result column="PolicyAmount" property="policyAmount" />
        <result column="PM_PRME_NEW_OLD_SW" property="paymentMode" />
        <result column="PrmeNewOldSW" property="prmeNewOldSW" />
        <result column="NoteVerifyResult" property="noteVerifyResult" />
        <result column="Main_Key" property="mainKey" />
    </resultMap>

    <sql id="caseSql">
        SELECT ROW_NUMBER() OVER (ORDER BY A.PolicyNo) AS ROW_NUM, A.PolicyNo, A.AppName, A.InsName, A.TBSubmitDate, A.BPMCurrentTak, D.NoteStatus, D.NoteVerifyResult, E.PTypeName PolicyType
        FROM MainPolicy A
        LEFT JOIN (
        SELECT B.NOTE_KEY, B.MAIN_KEY, B.iscancel, B.NoteStatus, B.NoteVerifyResult FROM PolicyNote B
        INNER JOIN (SELECT MAX(NOTE_KEY) NOTE_KEY, MAIN_KEY FROM PolicyNote WHERE ISCANCEL = 'N' GROUP BY MAIN_KEY) C ON B.NOTE_KEY = C.NOTE_KEY AND B.MAIN_KEY = C.MAIN_KEY
        ) D ON A.MAIN_KEY = D.MAIN_KEY
        LEFT JOIN PolicyType E ON E.PType_Code = A.PolicyType
        <where>
            <if test="vo.caseQuery and vo.caseQuery.size() > 0">
               (
                <foreach collection="vo.caseQuery" item="item" separator="OR">
                    (
                    <trim prefixOverrides="AND" >
                        <if test="item.serialNum != null and item.serialNum != ''">
                            AND A.PSalesCode = #{item.serialNum}
                        </if>
                        <if test="item.branchCode != null and item.branchCode != ''">
                            AND A.BranchCode = #{item.branchCode}
                        </if>
                        <if test="item.agentCode != null and item.agentCode != ''">
                            <choose>
                                <when test="item.agentCode == '86900'">
                                    AND A.AgentCode = '869' AND A.AgentBranchM = '00'
                                </when>
                                <when test="item.agentCode == '86901'">
                                    AND A.AgentCode = '869' AND A.AgentBranchM = '01'
                                </when>
                                <otherwise>
                                    AND A.AgentCode = #{item.agentCode}
                                </otherwise>
                            </choose>
                        </if>
                    </trim>
                    )
                </foreach>
                )
            </if>
            <if test="vo.policyNo != null and vo.policyNo != ''">
                AND A.PolicyNo LIKE CONCAT('%', #{vo.policyNo}, '%')
            </if>
            <if test="vo.lipmName != null and vo.lipmName != ''">
                AND A.AppName LIKE CONCAT('%', #{vo.lipmName}, '%')
            </if>
            <if test="vo.lipmId != null and vo.lipmId != ''">
                AND A.AppId LIKE CONCAT('%', #{vo.lipmId}, '%')
            </if>
            <if test="vo.lipiName != null and vo.lipiName != ''">
                AND A.InsName LIKE CONCAT('%', #{vo.lipiName}, '%')
            </if>
            <if test="vo.lipiId != null and vo.lipiId != ''">
                AND A.InsID LIKE CONCAT('%', #{vo.lipiId}, '%')
            </if>
            <if test="vo.caseStatus != null and vo.caseStatus != ''">
                AND A.BPMCurrentTak = #{vo.caseStatus}
            </if>
        </where>
    </sql>

    <select id="getPersonalCaseList" resultMap="CaseMap">
       <include refid="caseSql"></include>
    </select>

    <select id="getCaseList" resultMap="CaseMap">
        SELECT A.* FROM (
            <include refid="caseSql"></include>
        ) A
        WHERE A.ROW_NUM <![CDATA[<=]]> #{vo.pageNum} * #{vo.pageSize}
        AND A.ROW_NUM <![CDATA[>]]> (#{vo.pageNum} - 1) * #{vo.pageSize}
    </select>

    <select id="getCaseTotal" resultType="int">
        SELECT COUNT(*)  FROM (
            <include refid="caseSql"></include>
        ) A
    </select>

    <select id="getCaseProcess" resultMap="CaseMap">
        SELECT DISTINCT A.PolicyNo, A.AppName, A.AppID, A.InsName, A.InsID, A.TBSubmitDate,
            A.BPMCurrentTak NoteStatus, D.NoteVerifyResult, E.PTypeName PolicyType, FORMAT(A.PrintDate, 'yyyyMMdd') PrintDate, A.PolicyActiveDate, A.TransPayDate,
            P.UserName Manager, A.StampResult,
        (SELECT TOP (1) ReviewResult
            FROM PolicyReviewLog
                where Main_Key = (select Main_Key from MainPolicy where policyNo = #{policyNo})
                and LogType = 'B'
                and Sub_Serial = '0'
            order by ReviewTimes desc, ReviewType desc
        ) ReviewResult,
        (SELECT TOP(1) RFeeApplyDate FROM PolicyReject WHERE MAIN_KEY = A.MAIN_KEY AND RFeeApplyDate IS NOT NULL) RFeeApplyDate
        FROM MainPolicy A
        LEFT JOIN (
        SELECT B.NOTE_KEY, B.MAIN_KEY, B.iscancel, B.NoteStatus, B.NoteVerifyResult FROM
        PolicyNote B
        INNER JOIN (SELECT MAX(NOTE_KEY) NOTE_KEY, MAIN_KEY FROM PolicyNote GROUP BY MAIN_KEY) C
            ON B.NOTE_KEY = C.NOTE_KEY AND B.MAIN_KEY = C.MAIN_KEY
        ) D ON A.MAIN_KEY = D.MAIN_KEY
        LEFT JOIN UserProfile P ON P.User_ID = A.Manager
        LEFT JOIN PolicyType E ON E.PType_Code = A.PolicyType
        WHERE A.PolicyNo = #{policyNo}
    </select>
    
    <select id="getPolicyInfo" resultMap="CaseMap">
        SELECT DISTINCT A.PolicyNo, A.AppName, A.AppID, A.AppBirth, A.TBSubmitDate, A.BPMCurrentTak,
        A.AccDocNo, A.PM_PRME_NEW_OLD_SW,
        (SELECT TOP(1) PrmeNewOldSW FROM PolicyFormData WHERE MAIN_KEY = A.MAIN_KEY) PrmeNewOldSW,
        E.PTypeName PolicyType, A.StampResult, A.PayType, A.InsBirth, A.InsName, A.InsID, A.PolicyAmount, A.PolicyAmountNTD
        FROM MainPolicy A
        LEFT JOIN (
            SELECT B.NOTE_KEY, B.MAIN_KEY, B.iscancel, B.NoteStatus, B.NoteVerifyResult FROM
            PolicyNote B
            INNER JOIN (SELECT MAX(NOTE_KEY) NOTE_KEY, MAIN_KEY FROM PolicyNote GROUP BY MAIN_KEY) C
        ON B.NOTE_KEY = C.NOTE_KEY AND B.MAIN_KEY = C.MAIN_KEY
        ) D ON A.MAIN_KEY = D.MAIN_KEY
        LEFT JOIN PolicyType E ON E.PType_Code = A.PolicyType
        WHERE A.PolicyNo = #{policyNo}
    </select>
    
    <select id="getNoteContent" resultMap="CaseMap">
        SELECT D.Note_key Main_key, D.APPName, D.InsName, D.NoteDate PrintDate, E.PTypeName PolicyType, D.NoteVerifyResult FROM MainPolicy A
        INNER JOIN (
            SELECT B.APPName, B.InsName, B.NoteDate, B.NOTE_KEY, B.MAIN_KEY, B.iscancel, B.NoteStatus, B.NoteVerifyResult FROM
            PolicyNote B
        ) D ON A.MAIN_KEY = D.MAIN_KEY
        LEFT JOIN PolicyType E ON E.PType_Code = A.PolicyType
        WHERE A.PolicyNo = #{policyNo}
    </select>

    <resultMap id="notePdfMap" type="com.twfhclife.eservice.api.jdzq.model.NotePdfVo">
        <result property="policyNo" column="PolicyNo"/>
        <result property="appName" column="AppName"/>
        <result property="insName" column="InsName"/>
        <result property="agentName" column="BrokerName"/>
        <result property="agentSalesName" column="AgentSalesName"/>
        <result property="agentSalesID" column="AgentSalesID"/>
        <result property="accDocNo" column="AccDocNo"/>
        <result property="branchDesc" column="BranchDesc"/>
        <result property="policyTypeName" column="PTypeName"/>
        <result property="manageDate" column="ManageDate"/>
        <result property="processorName" column="ProcessorName"/>
        <result property="extNumber" column="ExtNumber"/>
        <result property="dueDate" column="DueDate"/>
        <result property="noteVerifyMemo" column="NoteVerifyMemo"/>
        <collection property="noteItems" resultMap="NoteItemMap"/>
    </resultMap>

    <resultMap id="NoteItemMap" type="com.twfhclife.eservice.api.jdzq.model.NoteItemVo">
        <result property="itemCode" column="ItemCode"/>
        <result property="itemContent" column="ContentMemo"/>
    </resultMap>

    <select id="getNotePdf" resultMap="notePdfMap">
        SELECT DISTINCT A.PolicyNo, A.AppName, A.InsName, A.AgentCode agentCode, P.BrokerName, A.AgentSalesName, A.AgentSalesID,
        A.AccDocNo, D.BranchDesc, F.PTypeName, D.ManageDate, D.ProcessorName, D.ExtNumber, D.DueDate, D.NoteVerifyMemo,
        E.ItemCode, E.ContentMemo
        FROM MainPolicy A
        LEFT JOIN (
            SELECT B.NOTE_KEY, B.MAIN_KEY, B.NoteStatus, B.NoteVerifyResult,
            B.ManageDate, B.ProcessorName, B.ExtNumber, B.DueDate, B.NoteVerifyMemo, B.BranchDesc FROM PolicyNote B
        ) D ON A.MAIN_KEY = D.MAIN_KEY
        LEFT JOIN PolicyNoteItems E ON D.Note_Key = E.Note_Key
        LEFT JOIN BrokerProfile P ON A.AgentCode = P.Broker_ID
        LEFT JOIN PolicyType F ON F.PType_Code = A.PolicyType
        WHERE A.PolicyNo = #{policyNo} and D.Note_Key = #{noteKey}
    </select>

    <select id="getNoteSchedule" resultType="com.twfhclife.eservice.api.jdzq.model.NoteNotifyVo">
        SELECT A.AppName, A.InsName, A.PolicyNo, B.DueDate, A.PSalesCode, A.AgentCode, A.AgentBranchM
        FROM MainPolicy A
        INNER JOIN
        PolicyNote B ON A.Main_Key = B.Main_Key
        WHERE A.BPMCurrentTak IN ('602000S', '602500S')
        AND B.DueDate = FORMAT(DATEADD(day, +2, #{currDate}), 'yyyyMMdd')
    </select>

</mapper>