<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.twfhclife.eservice.api.shouxian.dao.ShouXianDao">

    <resultMap id="PolicyMap" type="com.twfhclife.eservice.api.shouxian.model.PolicyVo">
        <result column="POLICY_NO" property="policyNo"/>
        <result column="POLICY_TYPE" property="policyType"/>
        <result column="LIPM_NAME" property="lipmName"/>
        <result column="LIPM_ID" property="lipmId"/>
        <result column="LIPI_NAME" property="lipiName"/>
        <result column="LIPI_ID" property="lipiId"/>
        <result column="AGENT_NAME" property="agent"/>
        <result column="STATUS" property="status"/>
        <result column="EFFECTIVE_DATE" property="effectiveDate"/>
        <result column="MAIN_AMOUNT" property="mainAmount"/>
        <result column="LIPI_TABL_PREM" property="lipiTablPrem"/>
        <result column="PAYMENT_MODE" property="paymentMode"/>
        <result column="PREM_YEAR" property="premYear"/>
        <result column="PROD_MODE" property="prodMode"/>
        <result column="PROD_NAME" property="prodName"/>
        <result column="LIPM_RCP_METH_CODE" property="paymentMethod"/>
        <result column="LIPI_INSU_END_DATE" property="endDate"/>
        <result column="CURRENCY" property="currency"/>
    </resultMap>

    <select id="getPolicyList" resultMap="PolicyMap">
        SELECT
        (A.LIPM_INSU_TYPE ||A.LIPM_INSU_GRP_NO || A.LIPM_INSU_SEQ_NO) POLICY_NO, A.LIPM_INSU_TYPE POLICY_TYPE,
            A.LIPM_NAME_1 LIPM_NAME, A.LIPM_ID, A.LIPI_NAME, A.LIPI_ID, A.BNAG_REC_CLERK AGENT_NAME,
        CASE
        WHEN A.LIPM_ST <![CDATA[<=]]>  18 THEN 1
        WHEN A.LIPM_ST BETWEEN 30 AND 34 THEN 2
        WHEN A.LIPM_ST BETWEEN 50 AND 81  THEN 3
        END AS STAT,
        decode(nvl(A.LIPI_INSU_BEG_DATE,''), '', '', to_char(A.LIPI_INSU_BEG_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) EFFECTIVE_DATE, (CASE WHEN A.LIPI_MAIN_AMT = 0 THEN A.LIPI_CANCER_QUAN ELSE A.LIPI_MAIN_AMT END) AS MAIN_AMOUNT,
        A.LIPI_TABL_PREM, (CASE WHEN A.LIPM_RCP_CODE = 'A' AND A.LIPM_FLEX_RCP_MK = 'Y' THEN 'AY' ELSE A.LIPM_RCP_CODE END) AS PAYMENT_MODE, lpr.PROD_CURRENCY CURRENCY,
        A.LIPI_PREM_YEAR PREM_YEAR, A.LIPM_RCP_METH_CODE, lpe.SETT_INSU_TYPE PROD_MODE, lpe.SETT_CH_NAME PROD_NAME
        FROM (
        SELECT * FROM
        (
        SELECT A.*, ROW_NUMBER() OVER (ORDER BY A.LIPM_INSU_TYPE, A.LIPM_INSU_GRP_NO, A.LIPM_INSU_SEQ_NO ) AS ROW_NUM
        FROM (
        <include refid="policyListSql"/>
        ) A
        )
        WHERE
        ROW_NUM <![CDATA[>=]]> ((#{vo.pageNum} - 1) * #{vo.pageSize}) + 1
        AND ROW_NUM <![CDATA[<=]]> (#{vo.pageNum} * #{vo.pageSize})
        ) A
        LEFT JOIN LINEDR_ES_NONCHAR lnr ON lnr.NEDR_BANK_BRANCH = A.BNAG_S_BANK_BRANCH_CODE AND A.LIPM_AGEN_CODE = lnr.NEDR_AGEN_CODE
        LEFT JOIN LISETT_ES lpe ON lpe.SETT_INSU_TYPE = A.LIPM_INSU_TYPE
        LEFT JOIN LIPROD_ES lpr ON lpr.PROD_NO = A.LIPM_INSU_TYPE
    </select>

    <select id="getPolicyListTotal" resultType="com.twfhclife.eservice.api.shouxian.model.PolicyCountVo">
        SELECT SUM(CASE WHEN LIPM_ST <![CDATA[<=]]> 18 THEN 1 ELSE 0 END) effectiveCount,
        SUM(CASE WHEN LIPM_ST BETWEEN 30 AND 34 THEN 1 ELSE 0 END) stopCount,
        SUM(CASE WHEN LIPM_ST BETWEEN 50 AND 81 THEN 1 ELSE 0 END)  expireCount,
        count(1) total
        FROM (
        <include refid="policyListSql"/>
        )
    </select>

    <sql id="policyListSql">
        SELECT A.LIPM_INSU_TYPE, A.LIPM_INSU_GRP_NO, A.LIPM_INSU_SEQ_NO, A.LIPM_NAME_1, A.LIPM_ID, A.LIPM_ST, A.LIPM_AGEN_CODE, A.LIPM_RCP_METH_CODE,
        A.LIPM_RCP_CODE, A.LIPM_FLEX_RCP_MK,
        B.LIPI_NAME, B.LIPI_ID, B.LIPI_PREM_YEAR, B.LIPI_TABL_PREM, B.LIPI_INSU_END_DATE, B.LIPI_MAIN_AMT, B.LIPI_CANCER_QUAN, B.LIPI_INSU_BEG_DATE,
        C.BNAG_REC_CLERK, C.BNAG_S_BANK_BRANCH_CODE
        FROM LILIPM_ES_NONCHAR A
        LEFT JOIN LILIPI_ES_NONCHAR B
        ON A.LIPM_INSU_TYPE = B.LIPI_INSU_TYPE AND A.LIPM_INSU_GRP_NO = B.LIPI_INSU_GRP_NO AND A.LIPM_INSU_SEQ_NO = B.LIPI_INSU_SEQ_NO
        LEFT JOIN LIBNAG_ES_NONCHAR C
        ON A.LIPM_INSU_TYPE = C.BNAG_INSU_TYPE AND A.LIPM_INSU_GRP_NO = C.BNAG_INSU_GRP_NO AND A.LIPM_INSU_SEQ_NO = C.BNAG_INSU_SEQ_NO
        <include refid="whereCase1"></include>
        UNION ALL
        SELECT A.LIPM_INSU_TYPE, A.LIPM_INSU_GRP_NO, A.LIPM_INSU_SEQ_NO, A.LIPM_NAME_1, A.LIPM_ID, A.LIPM_ST, A.LIPM_AGEN_CODE, A.LIPM_RCP_METH_CODE,
        A.LIPM_RCP_CODE, NULL,
        B.LIPI_NAME, B.LIPI_ID, NULL, B.LIPI_TABL_PREM, B.LIPI_INSU_END_DATE, B.LIPI_MAIN_AMT, NULL, B.LIPI_INSU_BEG_DATE,
        C.BNAG_REC_CLERK, C.BNAG_S_BANK_BRANCH_CODE
        FROM LIMIPM_ES_NONCHAR A
        LEFT JOIN LIMIPI_ES_NONCHAR B
        ON A.LIPM_INSU_TYPE = B.LIPI_INSU_TYPE AND A.LIPM_INSU_GRP_NO = B.LIPI_INSU_GRP_NO AND A.LIPM_INSU_SEQ_NO = B.LIPI_INSU_SEQ_NO
        LEFT JOIN LIBNAG_ES_NONCHAR C
        ON A.LIPM_INSU_TYPE = C.BNAG_INSU_TYPE AND A.LIPM_INSU_GRP_NO = C.BNAG_INSU_GRP_NO AND A.LIPM_INSU_SEQ_NO = C.BNAG_INSU_SEQ_NO
        <include refid="whereCase1"></include>
        UNION ALL
        SELECT A.NEPM_INSU_TYPE, A.NEPM_INSU_GRP_NO, A.NEPM_INSU_SEQ_NO, A.NEPM_NAME_1, A.NEPM_ID, A.NEPM_ST, A.NEPM_AGEN_CODE, A.NEPM_RCP_METH_CODE,
        A.NEPM_RCP_CODE, A.NEPM_FLEX_RCP_MK,
        B.NEPI_NAME, B.NEPI_ID, B.NEPI_PREM_YEAR, B.NEPI_TABL_PREM, B.NEPI_INSU_END_DATE, B.NEPI_MAIN_AMT, B.NEPI_CANCER_QUAN, B.NEPI_INSU_BEG_DATE,
        C.BNAG_REC_CLERK, C.BNAG_S_BANK_BRANCH_CODE
        FROM LINEPM_ES_NONCHAR A
        LEFT JOIN LINEPI_ES_NONCHAR B
        ON A.NEPM_INSU_TYPE = B.NEPI_INSU_TYPE AND A.NEPM_INSU_GRP_NO = B.NEPI_INSU_GRP_NO AND A.NEPM_INSU_SEQ_NO = B.NEPI_INSU_SEQ_NO
        LEFT JOIN LIBNAG_ES_NONCHAR C
        ON A.NEPM_INSU_TYPE = C.BNAG_INSU_TYPE AND A.NEPM_INSU_GRP_NO = C.BNAG_INSU_GRP_NO AND A.NEPM_INSU_SEQ_NO = C.BNAG_INSU_SEQ_NO
        <include refid="whereCase2"></include>
    </sql>

    <sql id="whereCase1">
        <where>
            <if test="vo.policyNo != null and vo.policyNo != ''">
               AND A.LIPM_INSU_TYPE = substr(#{vo.policyNo}, 1, 2) AND A.LIPM_INSU_GRP_NO = substr(#{vo.policyNo}, 3, 1) AND A.LIPM_INSU_SEQ_NO = substr(#{vo.policyNo}, 4, 7)
            </if>
            <if test="vo.lipmName != null and vo.lipmName != ''">
                AND A.LIPM_NAME_1 = #{vo.lipmName}
            </if>
            <if test="vo.lipmId != null and vo.lipmId != ''">
                AND A.LIPM_ID = #{vo.lipmId}
            </if>
            <if test="vo.lipiName != null and vo.lipiName != ''">
                AND B.LIPI_NAME = #{vo.lipiName}
            </if>
            <if test="vo.lipiId != null and vo.lipiId != ''">
                AND B.LIPI_ID = #{vo.lipiId}
            </if>
            <if test="vo.prodName != null and vo.prodName != ''">
                AND A.LIPM_INSU_TYPE = #{vo.prodName}
            </if>
            <if test="vo.stat != null and vo.stat == '1'.toString()">
                AND A.LIPM_ST <![CDATA[<=]]>  18
            </if>
            <if test="vo.stat != null and vo.stat == '2'.toString()">
                AND A.LIPM_ST BETWEEN 30 AND 34
            </if>
            <if test="vo.stat != null and vo.stat == '3'.toString()">
                AND A.LIPM_ST BETWEEN 50 AND 81
            </if>
            <if test="vo.permQuery and vo.permQuery.size() > 0">
                AND (
                    <foreach collection="vo.permQuery" item="item" separator="OR">
                    (
                    <trim prefixOverrides="AND">
                        <if test="item.agentCode != null and item.agentCode != ''">
                            <choose>
                                <when test="item.agentCode == '86900'">
                                    AND A.LIPM_AGEN_CODE = '869' AND A.LIPM_AGEN_CODE_BRANCH = '00'
                                </when>
                                <when test="item.agentCode == '86901'">
                                    AND A.LIPM_AGEN_CODE = '869' AND A.LIPM_AGEN_CODE_BRANCH = '01'
                                </when>
                                <otherwise>
                                    AND A.LIPM_AGEN_CODE = #{item.agentCode}
                                </otherwise>
                            </choose>
                        </if>
                        <if test="(item.serialNum != null and item.serialNum != '' ) or (item.idCard != null and item.idCard != '' )">
                            AND (C.BNAG_ID = #{item.serialNum} OR C.BNAG_ID = #{item.idCard})
                        </if>
                        <if test="item.branchCode != null and item.branchCode != ''">
                            AND C.BNAG_S_BANK_BRANCH_CODE = #{item.branchCode}
                        </if>
                    </trim>
                    )
                </foreach>
                )
            </if>
        </where>
    </sql>

    <sql id="whereCase2">
        <where>
            <if test="vo.policyNo != null and vo.policyNo != ''">
                AND A.NEPM_INSU_TYPE = substr(#{vo.policyNo}, 1, 2) AND A.NEPM_INSU_GRP_NO = substr(#{vo.policyNo}, 3, 1) AND A.NEPM_INSU_SEQ_NO = substr(#{vo.policyNo}, 4, 7)
            </if>
            <if test="vo.lipmName != null and vo.lipmName != ''">
                AND A.NEPM_NAME_1 = #{vo.lipmName}
            </if>
            <if test="vo.lipmId != null and vo.lipmId != ''">
                AND A.NEPM_ID = #{vo.lipmId}
            </if>
            <if test="vo.lipiName != null and vo.lipiName != ''">
                AND B.NEPI_NAME = #{vo.lipiName}
            </if>
            <if test="vo.lipiId != null and vo.lipiId != ''">
                AND B.NEPI_ID = #{vo.lipiId}
            </if>
            <if test="vo.prodName != null and vo.prodName != ''">
                AND A.NEPM_INSU_TYPE = #{vo.prodName}
            </if>
            <if test="vo.stat != null and vo.stat == '1'.toString()">
                AND A.NEPM_ST <![CDATA[<=]]>  18
            </if>
            <if test="vo.stat != null and vo.stat == '2'.toString()">
                AND A.NEPM_ST BETWEEN 30 AND 34
            </if>
            <if test="vo.stat != null and vo.stat == '3'.toString()">
                AND A.NEPM_ST BETWEEN 50 AND 81
            </if>
            <if test="vo.permQuery and vo.permQuery.size() > 0">
                AND ( <foreach collection="vo.permQuery" item="item" separator="OR">
                    (
                    <trim prefixOverrides="AND">
                        <if test="item.agentCode != null and item.agentCode != ''">
                            <choose>
                                <when test="item.agentCode == '86900'">
                                    AND A.NEPM_AGEN_CODE = '869' AND A.NEPM_AGEN_CODE_BRANCH = '00'
                                </when>
                                <when test="item.agentCode == '86901'">
                                    AND A.NEPM_AGEN_CODE = '869' AND A.NEPM_AGEN_CODE_BRANCH = '01'
                                </when>
                                <otherwise>
                                    AND A.NEPM_AGEN_CODE = #{item.agentCode}
                                </otherwise>
                            </choose>
                        </if>
                        <if test="(item.serialNum != null and item.serialNum != '' ) or (item.idCard != null and item.idCard != '' )">
                            AND (C.BNAG_ID = #{item.serialNum} OR C.BNAG_ID = #{item.idCard})
                        </if>
                        <if test="item.branchCode != null and item.branchCode != ''">
                            AND C.BNAG_S_BANK_BRANCH_CODE = #{item.branchCode}
                        </if>
                    </trim>
                    )
                </foreach>
                )
            </if>
        </where>
    </sql>

    <resultMap id="PolicyBaseMap" type="com.twfhclife.eservice.api.shouxian.model.PolicyBaseVo">
        <result column="POLICY_NO" property="policyNo"/>
        <result column="POLICY_TYPE" property="policyType"/>
        <result column="LIPM_NAME" property="lipmName"/>
        <result column="LIPM_ID" property="lipmId"/>
        <result column="PMDA_APPLICANT_CELLPHONE" property="lipmPhone"/>
        <result column="PMDA_INSURED_CELLPHONE" property="lipmInsuredPhone"/>
        <result column="PMDA_APPLICANT_EMAIL" property="lipmMail"/>
        <result column="LIPM_ADDR" property="lipmAddr"/>
        <result column="LIPI_NAME" property="lipiName"/>
        <result column="LIPI_ID" property="lipiId"/>
        <result column="LIPI_BIRTH" property="lipiBirth"/>
        <result column="LIPI_AGE" property="lipiAge"/>
        <result column="LIPI_SEX" property="lipiSex"/>
        <result column="AGENT_NAME" property="agent"/>
        <result column="STAT" property="stat"/>
        <result column="EFFECTIVE_DATE" property="effectiveDate"/>
        <result column="MAIN_AMOUNT" property="mainAmount"/>
        <result column="LIPI_TABL_PREM" property="lipiTablPrem"/>
        <result column="PAYMENT_MODE" property="paymentMode"/>
        <result column="PREM_YEAR" property="premYear"/>
        <result column="PROD_MODE" property="prodMode"/>
        <result column="PROD_NAME" property="prodName"/>
        <result column="LIPM_TEL_H" property="lipmTelH"/>
        <result column="LIPM_RCP_METH_CODE" property="paymentMethod"/>
        <result column="LIPI_INSU_BEG_DATE" property="beginDate"/>
        <result column="LIPI_INSU_END_DATE" property="endDate"/>
        <result column="PAYMENT_DUE_DATE" property="paymentDueDate" />
        <result column="PMDA_EPO_MK" property="pmdaEpoMk"/>
        <result column="CURRENCY" property="currency"/>
        <result column="PMDA_PRINT_DATE" property="printDate"/>
        <result column="LIPM_BIRTH" property="lipmBirth"/>
        <result column="PMDA_PI_TEL" property="pmdaPiTel"/>
        <result column="ASSN_ARRI_DATE" property="assnDate"/>
        <result column="ASSN_TR_ARRI_DATE" property="assnTrDate"/>
        <result column="PMDA_MAIL" property="pmdaMail"/>
        <result column="ASSN_STATUS" property="assnStatus"/>
        <result column="LIPM_5_GP" property="lipmGp"/>
        <result column="LIPM_AUTO_RCP_MK" property="autoMk"/>
        <result column="NEDR_BRANCH_NAME" property="branchName"/>
        <result column="LIPM_CHAR_AT_1" property="charAt1"/>
        <result column="LIPM_CHAR_AT_2" property="charAt2"/>
        <result column="LIPM_BANK_CODE" property="bankCode"/>
        <result column="PMDA_INVE_ATTR" property="riskLevel"/>
        <result column="STATUS" property="status"/>
        <result column="LIPM_ST_DATE" property="stDate"/>
        <association property="beneficiaries" resultMap="PolicyBeneficiaryMap"></association>
    </resultMap>

    <resultMap id="PolicyBeneficiaryMap" type="com.twfhclife.eservice.api.shouxian.model.PolicyBeneficiaryVo">
        <result column="LIPB_NAME" property="lipbName"/>
        <result column="LIPB_RELA" property="rela"/>
        <result column="LIPB_BENI_CODE" property="code"/>
        <result column="LIPB_SEQ" property="seq"/>
    </resultMap>

    <select id="getBasePolicy" resultMap="PolicyBaseMap">
        SELECT
        decode(nvl(A.LIPM_ST_DATE,''), '', '', to_char(A.LIPM_ST_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) LIPM_ST_DATE,
        A.LIPM_ST STATUS, A.LIPI_TABL_PREM, A.LIPM_BANK_CODE,
        A.LIPM_CHAR_AT_1, A.LIPM_CHAR_AT_2, lip.PMDA_INVE_ATTR,
        decode(nvl(A.LIPI_INSU_BEG_DATE,''), '', '', to_char(A.LIPI_INSU_BEG_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) EFFECTIVE_DATE,
        A.LIPM_AUTO_RCP_MK, lnr.NEDR_BRANCH_NAME, decode(nvl(A.BNAG_BIRTH,''), '', '', to_char(A.BNAG_BIRTH, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) LIPM_BIRTH,
        decode(nvl(lsn.ASSN_ARRI_DATE,''), '', '', to_char(lsn.ASSN_ARRI_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) ASSN_ARRI_DATE, decode(nvl(lsn.ASSN_TR_ARRI_DATE,''), '', '', to_char(lsn.ASSN_TR_ARRI_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) ASSN_TR_ARRI_DATE, lip.PMDA_MAIL, lsn.ASSN_STATUS,
        A.LIPM_TEL_H, lip.PMDA_INSURED_CELLPHONE, lip.PMDA_APPLICANT_CELLPHONE, lip.PMDA_APPLICANT_EMAIL, A.LIPM_5_GP,
        A.LIPM_ADDR, decode(nvl(A.LIPI_BIRTH,''), '', '', to_char(A.LIPI_BIRTH, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) LIPI_BIRTH, A.LIPI_AGE, A.LIPI_SEX, lbp.LIPB_NAME, lbp.LIPB_RELA, lpr.PROD_CURRENCY CURRENCY,
        lbp.LIPB_BENI_CODE, lbp.LIPB_SEQ, A.LIPM_NAME_1  LIPM_NAME, A.LIPM_ID, A.LIPI_NAME, A.LIPI_ID,
        (CASE WHEN A.LIPM_RCP_CODE = 'A' AND A.LIPM_FLEX_RCP_MK = 'Y' THEN 'AY' ELSE A.LIPM_RCP_CODE END) AS PAYMENT_MODE, lip.PMDA_EPO_MK,
        (CASE WHEN A.LIPI_MAIN_AMT = 0 THEN A.LIPI_CANCER_QUAN ELSE A.LIPI_MAIN_AMT END) AS MAIN_AMOUNT, lip.PMDA_PI_TEL,
        decode(nvl(A.LIPI_INSU_BEG_DATE,''), '', '', to_char(A.LIPI_INSU_BEG_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) LIPI_INSU_BEG_DATE, decode(nvl(A.LIPI_INSU_END_DATE,''), '', '', to_char(A.LIPI_INSU_END_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) LIPI_INSU_END_DATE, A.LIPM_RCP_METH_CODE, A.LIPI_PREM_YEAR PREM_YEAR,
        lpe.SETT_CH_NAME PROD_NAME, CONCAT(CONCAT(A.LIPM_INSU_TYPE, A.LIPM_INSU_GRP_NO), A.LIPM_INSU_SEQ_NO) POLICY_NO,  decode(nvl(lip.PMDA_PRINT_DATE,''), '', '', to_char(lip.PMDA_PRINT_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) PMDA_PRINT_DATE,
        decode(nvl(A.LIPI_INSU_BEG_DATE,''), '', '', to_char(ADD_MONTHS(A.LIPI_INSU_BEG_DATE, (A.LIPI_PREM_YEAR)*12), 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) PAYMENT_DUE_DATE
        FROM (
            <include refid="policyBaseSql"/>
        ) A
        LEFT JOIN LIPMDA_ES_NONCHAR lip ON A.LIPM_INSU_TYPE = lip.PMDA_INSU_TYPE AND A.LIPM_INSU_GRP_NO = lip.PMDA_INSU_GRP_NO AND A.LIPM_INSU_SEQ_NO = lip.PMDA_INSU_SEQ_NO
        LEFT JOIN LILIPB_ES_NONCHAR lbp ON A.LIPM_INSU_TYPE = lbp.LIPB_INSU_TYPE AND A.LIPM_INSU_GRP_NO = lbp.LIPB_INSU_GRP_NO AND A.LIPM_INSU_SEQ_NO = lbp.LIPB_INSU_SEQ_NO
        LEFT JOIN LINEDR_ES_NONCHAR lnr ON lnr.NEDR_BANK_BRANCH = A.BNAG_S_BANK_BRANCH_CODE AND A.LIPM_AGEN_CODE = lnr.NEDR_AGEN_CODE
        LEFT JOIN LISETT_ES lpe ON lpe.SETT_INSU_TYPE = A.LIPM_INSU_TYPE
        LEFT JOIN LIPROD_ES lpr ON lpr.PROD_NO = A.LIPM_INSU_TYPE
        LEFT JOIN LIASSN_ES_NONCHAR lsn ON lsn.ASSN_INSU_NO = #{policyNo}
    </select>

    <sql id="policyBaseSql">
        SELECT A.LIPM_ST_DATE,A.LIPM_INSU_TYPE, A.LIPM_INSU_GRP_NO, A.LIPM_INSU_SEQ_NO, A.LIPM_NAME_1, A.LIPM_ID, A.LIPM_ST, A.LIPM_AGEN_CODE, A.LIPM_RCP_METH_CODE,
        A.LIPM_RCP_CODE, A.LIPM_FLEX_RCP_MK, A.LIPM_ADDR, A.LIPM_5_GP, A.LIPM_TEL_H, A.LIPM_AUTO_RCP_MK, A.LIPM_CHAR_AT_1, A.LIPM_CHAR_AT_2, A.LIPM_BANK_CODE,
        B.LIPI_SEX, B.LIPI_AGE, B.LIPI_BIRTH,
        B.LIPI_NAME, B.LIPI_ID, B.LIPI_PREM_YEAR, B.LIPI_TABL_PREM, B.LIPI_INSU_END_DATE, B.LIPI_MAIN_AMT, B.LIPI_CANCER_QUAN, B.LIPI_INSU_BEG_DATE,
        C.BNAG_REC_CLERK, C.BNAG_S_BANK_BRANCH_CODE, C.BNAG_BIRTH
        FROM LILIPM_ES_NONCHAR A
        LEFT JOIN LILIPI_ES_NONCHAR B
        ON A.LIPM_INSU_TYPE = B.LIPI_INSU_TYPE AND A.LIPM_INSU_GRP_NO = B.LIPI_INSU_GRP_NO AND A.LIPM_INSU_SEQ_NO = B.LIPI_INSU_SEQ_NO
        LEFT JOIN LIBNAG_ES_NONCHAR C
        ON A.LIPM_INSU_TYPE = C.BNAG_INSU_TYPE AND A.LIPM_INSU_GRP_NO = C.BNAG_INSU_GRP_NO AND A.LIPM_INSU_SEQ_NO = C.BNAG_INSU_SEQ_NO
        WHERE A.LIPM_INSU_TYPE = #{policyType} AND A.LIPM_INSU_GRP_NO = #{policyGrpNo} AND A.LIPM_INSU_SEQ_NO = #{policySeqNo}
        UNION ALL
        SELECT A.LIPM_ST_DATE,A.LIPM_INSU_TYPE, A.LIPM_INSU_GRP_NO, A.LIPM_INSU_SEQ_NO, A.LIPM_NAME_1, A.LIPM_ID, A.LIPM_ST, A.LIPM_AGEN_CODE, A.LIPM_RCP_METH_CODE,
        A.LIPM_RCP_CODE, NULL, A.LIPM_ADDR, A.LIPM_5_GP, A.LIPM_TEL_H, NULL, NULL, NULL, A.LIPM_BANK_CODE,
        B.LIPI_SEX, B.LIPI_AGE, B.LIPI_BIRTH,
        B.LIPI_NAME, B.LIPI_ID, NULL, B.LIPI_TABL_PREM, B.LIPI_INSU_END_DATE, B.LIPI_MAIN_AMT, NULL, B.LIPI_INSU_BEG_DATE,
        C.BNAG_REC_CLERK, C.BNAG_S_BANK_BRANCH_CODE, C.BNAG_BIRTH
        FROM LIMIPM_ES_NONCHAR A
        LEFT JOIN LIMIPI_ES_NONCHAR B
        ON A.LIPM_INSU_TYPE = B.LIPI_INSU_TYPE AND A.LIPM_INSU_GRP_NO = B.LIPI_INSU_GRP_NO AND A.LIPM_INSU_SEQ_NO = B.LIPI_INSU_SEQ_NO
        LEFT JOIN LIBNAG_ES_NONCHAR C
        ON A.LIPM_INSU_TYPE = C.BNAG_INSU_TYPE AND A.LIPM_INSU_GRP_NO = C.BNAG_INSU_GRP_NO AND A.LIPM_INSU_SEQ_NO = C.BNAG_INSU_SEQ_NO
        WHERE A.LIPM_INSU_TYPE = #{policyType} AND A.LIPM_INSU_GRP_NO = #{policyGrpNo} AND A.LIPM_INSU_SEQ_NO = #{policySeqNo}
        UNION ALL
        SELECT A.NEPM_ST_DATE,A.NEPM_INSU_TYPE, A.NEPM_INSU_GRP_NO, A.NEPM_INSU_SEQ_NO, A.NEPM_NAME_1, A.NEPM_ID, A.NEPM_ST, A.NEPM_AGEN_CODE, A.NEPM_RCP_METH_CODE,
        A.NEPM_RCP_CODE, A.NEPM_FLEX_RCP_MK, A.NEPM_ADDR, A.NEPM_5_GP, A.NEPM_TEL_H, A.NEPM_AUTO_RCP_MK, A.NEPM_CHAR_AT_1, A.NEPM_CHAR_AT_2, A.NEPM_BANK_CODE,
        B.NEPI_SEX, B.NEPI_AGE, B.NEPI_BIRTH,
        B.NEPI_NAME, B.NEPI_ID, B.NEPI_PREM_YEAR, B.NEPI_TABL_PREM, B.NEPI_INSU_END_DATE, B.NEPI_MAIN_AMT, B.NEPI_CANCER_QUAN, B.NEPI_INSU_BEG_DATE,
        C.BNAG_REC_CLERK, C.BNAG_S_BANK_BRANCH_CODE, C.BNAG_BIRTH
        FROM LINEPM_ES_NONCHAR A
        LEFT JOIN LINEPI_ES_NONCHAR B
        ON A.NEPM_INSU_TYPE = B.NEPI_INSU_TYPE AND A.NEPM_INSU_GRP_NO = B.NEPI_INSU_GRP_NO AND A.NEPM_INSU_SEQ_NO = B.NEPI_INSU_SEQ_NO
        LEFT JOIN LIBNAG_ES_NONCHAR C
        ON A.NEPM_INSU_TYPE = C.BNAG_INSU_TYPE AND A.NEPM_INSU_GRP_NO = C.BNAG_INSU_GRP_NO AND A.NEPM_INSU_SEQ_NO = C.BNAG_INSU_SEQ_NO
        WHERE A.NEPM_INSU_TYPE = #{policyType} AND A.NEPM_INSU_TYPE = #{policyGrpNo} AND A.NEPM_INSU_TYPE = #{policySeqNo}
    </sql>

    <resultMap id="SafeGuardMap" type="com.twfhclife.eservice.api.shouxian.model.SafeGuardVo">
        <result column="DESI_DESC_CH" property="name"/>
    </resultMap>

    <select id="getSafeGuard" resultMap="SafeGuardMap">
        SELECT lde.DESI_DESC_CH FROM LIDESI_ES lde
            WHERE SUBSTR(DESI_CODE,1,2) = SUBSTR(#{policyNo}, 1, 2)
    </select>

    <resultMap id="PaymentRecordMap" type="com.twfhclife.eservice.api.shouxian.model.PaymentRecordVo">
        <result column="PRPA_RCP_DATE" property="rcpDate"/>
        <result column="PRPA_PAAB_AMT" property="paabAmt"/>
        <result column="PRPA_ACT_AMT" property="actAmt"/>
        <result column="PRPA_RCP_CODE" property="rcpCode"/>
        <result column="PRPA_DESC" property="desc"/>
        <result column="PRPK_RCP_TYPE_CODE" property="paymentCode"/>
    </resultMap>

    <sql id="paymentRecordColumnSql">
        decode(nvl(A.PRPA_RCP_DATE,''), '', '', to_char(A.PRPA_RCP_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) PRPA_RCP_DATE,
        A.PRPA_PAAB_AMT,
        A.PRPA_ACT_AMT,
        A.PRPA_RCP_CODE,
        CONCAT('第', CONCAT(A.PRPA_TMS, CONCAT('期/共', CONCAT( CASE WHEN A.PRPA_RCP_CODE = N'A' THEN B.LIPI_PREM_YEAR * 1 WHEN A.PRPA_RCP_CODE = N'S' THEN B.LIPI_PREM_YEAR * 2 WHEN A.PRPA_RCP_CODE = N'Q' THEN B.LIPI_PREM_YEAR * 4 WHEN A.PRPA_RCP_CODE = N'M' THEN B.LIPI_PREM_YEAR * 12 WHEN A.PRPA_RCP_CODE = N'T' THEN 1 END, '期' )))) PRPA_DESC
    </sql>
    <select id="getPaymentRecord" resultMap="PaymentRecordMap">

            SELECT A.* , B.PRPK_RCP_TYPE_CODE FROM (
                SELECT
                    decode(nvl(A.PRPA_RCP_DATE,''), '', '', to_char(A.PRPA_RCP_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) PRPA_RCP_DATE,
                    A.PRPA_PAAB_AMT,
                    A.PRPA_ACT_AMT,
                    A.PRPA_RCP_CODE,
                    CONCAT('第', CONCAT(A.PRPA_TMS, CONCAT('期/共', CONCAT( CASE WHEN A.PRPA_RCP_CODE = N'A' THEN B.LIPI_PREM_YEAR * 1 WHEN A.PRPA_RCP_CODE = N'S' THEN B.LIPI_PREM_YEAR * 2 WHEN A.PRPA_RCP_CODE = N'Q' THEN B.LIPI_PREM_YEAR * 4 WHEN A.PRPA_RCP_CODE = N'M' THEN B.LIPI_PREM_YEAR * 12 WHEN A.PRPA_RCP_CODE = N'T' THEN 1 END, '期' )))) PRPA_DESC,
                    A.PRPA_RCP_BATCH,
                    A.PRPA_DEAL_NO
                FROM LIPRPA_ES A
                         INNER JOIN LILIPI_ES_NONCHAR B
                                   ON A.PRPA_INSU_TYPE = B.LIPI_INSU_TYPE AND A.PRPA_INSU_GRP_NO = B.LIPI_INSU_GRP_NO AND A.PRPA_INSU_SEQ_NO = B.LIPI_INSU_SEQ_NO
                WHERE A.PRPA_INSU_TYPE = substr(#{policyNo}, 1, 2) AND A.PRPA_INSU_GRP_NO = substr(#{policyNo}, 3, 1) AND A.PRPA_INSU_SEQ_NO = substr(#{policyNo}, 4, 7)
                UNION ALL
                SELECT
                    decode(nvl(A.PRPA_RCP_DATE,''), '', '', to_char(A.PRPA_RCP_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) PRPA_RCP_DATE,
                    A.PRPA_PAAB_AMT,
                    A.PRPA_ACT_AMT,
                    A.PRPA_RCP_CODE,
                    '第0期/共0期' PRPA_DESC,
                    A.PRPA_RCP_BATCH,
                    A.PRPA_DEAL_NO
                FROM LIPRPA_ES A
                         INNER JOIN LIMIPI_ES_NONCHAR B
                                   ON A.PRPA_INSU_TYPE = B.LIPI_INSU_TYPE AND A.PRPA_INSU_GRP_NO = B.LIPI_INSU_GRP_NO AND A.PRPA_INSU_SEQ_NO = B.LIPI_INSU_SEQ_NO
                WHERE A.PRPA_INSU_TYPE = substr(#{policyNo}, 1, 2) AND A.PRPA_INSU_GRP_NO = substr(#{policyNo}, 3, 1) AND A.PRPA_INSU_SEQ_NO = substr(#{policyNo}, 4, 7)
                UNION ALL
                SELECT decode(nvl(A.PRPA_RCP_DATE,''), '', '', to_char(A.PRPA_RCP_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) PRPA_RCP_DATE,
                       A.PRPA_PAAB_AMT,
                       A.PRPA_ACT_AMT,
                       A.PRPA_RCP_CODE,
                       CONCAT('第', CONCAT(A.PRPA_TMS, CONCAT('期/共', CONCAT( CASE WHEN A.PRPA_RCP_CODE = N'A' THEN B.NEPI_PREM_YEAR * 1 WHEN A.PRPA_RCP_CODE = N'S' THEN B.NEPI_PREM_YEAR * 2 WHEN A.PRPA_RCP_CODE = N'Q' THEN B.NEPI_PREM_YEAR * 4 WHEN A.PRPA_RCP_CODE = N'M' THEN B.NEPI_PREM_YEAR * 12 WHEN A.PRPA_RCP_CODE = N'T' THEN 1 END, '期' )))) PRPA_DESC,
                       A.PRPA_RCP_BATCH,
                       A.PRPA_DEAL_NO
                FROM LIPRPA_ES A
                         INNER JOIN LINEPI_ES_NONCHAR B
                            ON A.PRPA_INSU_TYPE = B.NEPI_INSU_TYPE AND A.PRPA_INSU_GRP_NO = B.NEPI_INSU_GRP_NO AND A.PRPA_INSU_SEQ_NO = B.NEPI_INSU_SEQ_NO
                WHERE A.PRPA_INSU_TYPE = substr(#{policyNo}, 1, 2) AND A.PRPA_INSU_GRP_NO = substr(#{policyNo}, 3, 1) AND A.PRPA_INSU_SEQ_NO = substr(#{policyNo}, 4, 7)
                                                   ) A LEFT JOIN LIPRPK_ES_NONCHAR B ON A.PRPA_RCP_BATCH = B.PRPK_RCP_BATCH AND A.PRPA_DEAL_NO = B.PRPK_DEAL_NO

    </select>

    <resultMap id="PremiumMap" type="com.twfhclife.eservice.api.shouxian.model.PremiumVo">
        <result column="BONF_FILE_BEG_DATE" property="beginDate"/>
        <result column="BONF_BON_BAL" property="balance"/>
        <result column="BONF_TAKE_CODE" property="code"/>
        <result column="BONF_BON_DATE" property="bonDate"/>
        <result column="PREMIUM" property="premium"/>
        <result column="BONF_BON" property="currentYearDividend"/>
    </resultMap>

    <select id="getPolicyPremium" resultMap="PremiumMap">
        <![CDATA[
            SELECT
            decode(nvl(BONF_BON_DATE,''), '', '', TO_CHAR(BONF_BON_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) BONF_BON_DATE,
            decode(nvl(BONF_FILE_BEG_DATE,''), '', '', TO_CHAR(BONF_FILE_BEG_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) BONF_FILE_BEG_DATE,
            BONF_ACCU_BON PREMIUM,
            BONF_BON_BAL, BONF_TAKE_CODE , BONF_BON
            FROM LIBONF_ES WHERE
            BONF_INSU_TYPE ||BONF_INSU_GRP_NO ||BONF_INSU_SEQ_NO = #{policyNo}
           ]]>
    </select>

    <resultMap id="ExpireOfPaymentMap" type="com.twfhclife.eservice.api.shouxian.model.ExpireOfPaymentVo">
        <result column="PAYF_PAY_REAS" property="payReas"/>
        <result column="PAYF_PAY_AMT" property="payAmount"/>
        <result column="PAHI_DEP_I_BOOK_DATE" property="bookDate"/>
        <result column="PAYF_NAME" property="payName"/>
        <result column="PAYF_PAY_METH" property="payMethod"/>
        <result column="PAYF_BANK" property="bank"/>
        <result column="PAHI_REMIT_AT" property="remitAt"/>
        <result column="PAHI_BANK_CODE" property="bankCode"/>
        <result column="PAHI_ACT_AMT" property="amountActuallyPaid"/>
    </resultMap>

    <select id="getExpireOfPayment" resultMap="ExpireOfPaymentMap">
        SELECT lbf.PAYF_PAY_AMT,
            decode(nvl(lph.PAHI_DEP_I_BOOK_DATE,''), '', '', to_char(lph.PAHI_DEP_I_BOOK_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) PAHI_DEP_I_BOOK_DATE,
            lbf.PAYF_PAY_METH,
            lbf.PAYF_BANK,
            lbf.PAYF_NAME,
            lph.PAHI_REMIT_AT,
            lph.PAHI_BANK_CODE,
            PAHI_PAY_CODE PAYF_PAY_REAS,
            lph.PAHI_ACT_AMT
            FROM LIPAYF_ES lbf
            LEFT JOIN LIPAHI_ES lph ON lph.PAHI_INSU_TYPE||lph.PAHI_INSU_GRP_NO||lph.PAHI_INSU_SEQ_NO = lbf.PAYF_INSU_NO
        WHERE lbf.PAYF_INSU_NO = #{policyNo} AND lph.PAHI_PAY_CODE IN ('01', '02', '96')
    </select>

    <resultMap id="ChangeInfoMap" type="com.twfhclife.eservice.api.shouxian.model.ChangeInfoVo">
        <result column="RCDC_DELIVERY_AGEN_CODE" property="applyType"/>
        <result column="RCDC_ACC_DATE" property="accDate"/>
        <result column="RCDC_PROC_MK" property="procMk"/>
        <result column="RCDC_CHAN_ITEM_1" property="item1"/>
        <result column="RCDC_CHAN_ITEM_2" property="item2"/>
        <result column="RCDC_CHAN_ITEM_3" property="item3"/>
        <result column="RCDC_CHAN_ITEM_4" property="item4"/>
        <result column="RCDC_CHAN_ITEM_5" property="item5"/>
        <result column="RCDC_CHAN_ITEM_6" property="item6"/>
        <result column="RCDC_CHAN_ITEM_7" property="item7"/>
        <result column="RCDC_CHAN_ITEM_8" property="item8"/>
        <result column="RCDC_CHAN_ITEM_9" property="item9"/>
        <result column="RCDC_CHAN_ITEM_10" property="item10"/>
    </resultMap>

    <select id="getPolicyChangeInfo" resultMap="ChangeInfoMap">
        SELECT
        lrc.RCDC_DELIVERY_AGEN_CODE, decode(nvl(lrc.RCDC_ACC_DATE,''), '', '', to_char(lrc.RCDC_ACC_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) RCDC_ACC_DATE, lrc.RCDC_PROC_MK,
        lrc.RCDC_CHAN_ITEM_1, lrc.RCDC_CHAN_ITEM_2, lrc.RCDC_CHAN_ITEM_3, lrc.RCDC_CHAN_ITEM_4, lrc.RCDC_CHAN_ITEM_5, lrc.RCDC_CHAN_ITEM_6, lrc.RCDC_CHAN_ITEM_7, lrc.RCDC_CHAN_ITEM_8, lrc.RCDC_CHAN_ITEM_9, lrc.RCDC_CHAN_ITEM_10
        FROM LIRCDC_ES lrc
        WHERE (lrc.RCDC_INSU_TYPE || lrc.RCDC_INSU_GRP_NO || lrc.RCDC_INSU_SEQ_NO) = #{policyNo}
    </select>

    <resultMap id="IncomeDistributionMap" type="com.twfhclife.eservice.api.shouxian.model.IncomeDistributionVo">
        <result column="INVT_NAME" property="invtName"/>
        <result column="INVT_NO" property="invtNo"/>
        <result column="INPD_INT_COMPU_DATE" property="compuDate"/>
        <result column="CLUP_TR_DATE" property="trDate"/>
        <result column="INVT_EXCH_CURR" property="currency"/>
        <result column="CLUP_EXPE_UNITS" property="expeUnits"/>
        <result column="CLUP_INPR_RATE" property="inprRate"/>
        <result column="CLUP_TR_DATE" property="trDate"/>
        <result column="CLUP_EXPE_NTD" property="expeNtd"/>
        <result column="CLUP_EXCH_RATE" property="exchRate"/>
        <result column="UNITS" property="units"/>
        <result column="CLUP_F_PAY_DATE" property="payDate"/>
        <result column="CLUP_TR_CODE" property="trCode"/>
    </resultMap>

    <select id="getIncomeDistribution" resultMap="IncomeDistributionMap">
        SELECT DISTINCT lin.INVT_NAME, lin.INVT_NO, lcp.CLUP_TR_CODE,
        CASE
        WHEN lcp.CLUP_DEDT_INPR != 0 THEN  lcp.CLUP_EXPE_UNITS * (lcp.CLUP_INPR_RATE - lcp.CLUP_OW_UNIT_INT ) / lcp.CLUP_DEDT_INPR
        ELSE 0
        END AS UNITS,
        lcp.CLUP_EXPE_NTD,
        decode(nvl(lcp.CLUP_F_PAY_DATE,''), '', '', to_char(lcp.CLUP_F_PAY_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official'''))  CLUP_F_PAY_DATE,
        decode(nvl(lcp.CLUP_TR_DATE,''), '', '', to_char(lcp.CLUP_TR_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) CLUP_TR_DATE, lcp.CLUP_EXPE_CURR, lcp.CLUP_EXPE_UNITS, lcp.CLUP_INPR_RATE,
        lcp.CLUP_TR_DATE, lcp.CLUP_EXCH_RATE, lcp.CLUP_EXPE_NTD, lcp.CLUP_EXPE_NTD, lcp.CLUP_EXCH_RATE,
        lip.INPD_INT_COMPU_DATE INPD_INT_COMPU_DATE
        FROM LICLUP_ES lcp
        LEFT JOIN LIINPD_ES lip ON lcp.CLUP_INVT_NO = lip.INPD_INVT_NO AND lcp.CLUP_DATE = lip.INPD_DATE
        LEFT JOIN LIINVT_ES lin ON lcp.CLUP_INVT_NO = lin.INVT_NO
        WHERE lcp.CLUP_TR_DATE IS NOT NULL AND lcp.CLUP_INSU_NO = #{policyNo}
        ORDER BY lcp.CLUP_TR_DATE DESC
    </select>

    <resultMap id="FundTransactionListMap" type="com.twfhclife.eservice.api.shouxian.model.JdFundTransactionVo">
        <result column="INVT_NAME" property="invtName"/>
        <result column="INVT_NO" property="invtNo"/>
        <result column="SADP_TR_DATE" property="sadpTrDate"/>
        <result column="SADP_TR_CODE" property="sadpTrCode"/>
        <result column="SADP_TR_UNITS" property="sadpTrUnits"/>
        <result column="FUND_VALUE" property="fundValue"/>
        <result column="SADP_EXCH_DATE" property="sadpExchDate"/>
        <result column="SADP_EXCH_CURR" property="invtExchCurr"/>
        <result column="FUND_VALUE" property="exchRate"/>
    </resultMap>

    <select id="getFundTransactionPageList" resultMap="FundTransactionListMap">
        SELECT * FROM (
            SELECT rownum ROW_NUM, lsp.SADP_TR_DATE, lin.INVT_NAME, lin.INVT_NO, lsp.SADP_TR_CODE,
            CASE WHEN SUBSTR(lsp.SADP_NO, 1, 2) = 'RT' THEN lsp.SADP_TR_AMT
            ELSE SADP_TR_UNITS
            END SADP_TR_UNITS,
            CASE WHEN lsp.SADP_TR_TYPE = '1' THEN leh.EXCH_SPEBK_PURATE
            WHEN lsp.SADP_TR_TYPE = '2' THEN leh.EXCH_SPEBK_SORATE
            END FUND_VALUE, lsp.SADP_EXCH_DATE,lsp.SADP_EXCH_CURR
            FROM LISADP_ES lsp
            LEFT JOIN LIINVT_ES lin ON lsp.SADP_INVT_NO  = lin.INVT_NO
            LEFT JOIN LIEXCH_ES leh ON lsp.SADP_EXCH_CURR = leh.EXCH_CURR_CODE AND lsp.SADP_EXCH_DATE = leh.EXCH_DATE
            <where>
                AND lsp.SADP_INSU_NO = #{policyNo}
                <if test="trCode != null">
                    <choose>
                        <when test="trCode == 'INV101'">
                            AND lsp.SADP_TR_CODE IN ('INV101', 'INV102', 'INV103')
                        </when>
                        <otherwise>
                            AND lsp.SADP_TR_CODE = #{trCode}
                        </otherwise>
                    </choose>
                </if>
                <if test="startDate != null">
                    AND lsp.SADP_TR_DATE <![CDATA[>=]]> to_date(#{startDate}, 'yyyy/MM/dd')
                </if>
                <if test="endDate != null">
                    AND lsp.SADP_TR_DATE <![CDATA[<=]]> to_date(#{endDate}, 'yyyy/MM/dd')
                </if>
            </where>
        )
        <if test="pageNum != null and pageSize != null">
            WHERE
            ROW_NUM <![CDATA[>=]]> ((#{pageNum} - 1) * #{pageSize}) + 1
            AND ROW_NUM <![CDATA[<=]]> (#{pageNum} * #{pageSize})
        </if>
    </select>

    <select id="getFundTransactionTotal" resultType="int">
        SELECT COUNT(*) FROM (
        SELECT rownum ROW_NUM, lsp.SADP_TR_DATE, lin.INVT_NAME, lin.INVT_NO, lsp.SADP_TR_CODE,
        CASE WHEN SUBSTR(lsp.SADP_NO, 1, 2) = 'RT' THEN lsp.SADP_TR_AMT
        ELSE SADP_TR_UNITS
        END SADP_TR_UNITS,
        CASE WHEN lsp.SADP_TR_TYPE = '1' THEN leh.EXCH_SPEBK_PURATE
        WHEN lsp.SADP_TR_TYPE = '2' THEN leh.EXCH_SPEBK_SORATE
        END FUND_VALUE, lsp.SADP_EXCH_DATE
        FROM LISADP_ES lsp
        LEFT JOIN LIINVT_ES lin ON lsp.SADP_INVT_NO  = lin.INVT_NO
        LEFT JOIN LIEXCH_ES leh ON lsp.SADP_EXCH_CURR = leh.EXCH_CURR_CODE AND lsp.SADP_EXCH_DATE = leh.EXCH_DATE
        <where>
            AND lsp.SADP_INSU_NO = #{policyNo}
            <if test="trCode != null">
                <choose>
                    <when test="trCode == 'INV101'">
                        AND lsp.SADP_TR_CODE IN ('INV101', 'INV102', 'INV103')
                    </when>
                    <otherwise>
                        AND lsp.SADP_TR_CODE = #{trCode}
                    </otherwise>
                </choose>
            </if>
            <if test="startDate != null">
                AND lsp.SADP_TR_DATE <![CDATA[>=]]> to_date(#{startDate}, 'yyyy/MM/dd')
            </if>
            <if test="endDate != null">
                AND lsp.SADP_TR_DATE <![CDATA[<=]]> to_date(#{endDate}, 'yyyy/MM/dd')
            </if>
        </where>
        )
    </select>

    <resultMap id="FundPrdtListMap" type="com.twfhclife.eservice.api.shouxian.model.FundPrdtVo">
        <result column="PRDT_BOOK_DATE" property="prdtBookDate"/>
        <result column="PRDT_RCP_AMT" property="prdtRcpAmt"/>
        <result column="INT_AMOUNT" property="prdtInvestAmt"/>
        <result column="PREMIUM_COST" property="cost"/>
        <result column="PRDT_RCP_AMT" property="prdtRcpAmt"/>
    </resultMap>

    <select id="getFundPrdtPageList" resultMap="FundPrdtListMap">
        SELECT * FROM (
            SELECT rownum ROW_NUM, lpt.PRDT_BOOK_DATE, lpt.PRDT_RCP_AMT,
            lpt.PRDT_TARGET_LOADING  + lpt.PRDT_INCRE_LOADING PREMIUM_COST,
            NVL(lti.TRHI_INT, 0) - NVL(lti.TRHI_INT_TAX, 0) - NVL(lti.TRHI_SUPPLE_PREM, 0) INT_AMOUNT
            FROM LIPRDT_ES lpt
            LEFT JOIN LITRHI_ES lti ON lpt.PRDT_INSU_NO = lti.TRHI_INSU_NO AND lti.TRHI_DATE = lpt.PRDT_BOOK_DATE
        <where>
            AND lpt.PRDT_INSU_NO = #{policyNo}
            <if test="startDate != null">
                AND lpt.PRDT_BOOK_DATE <![CDATA[>=]]> to_date(#{startDate}, 'yyyy/MM/dd')
            </if>
            <if test="endDate != null">
                AND lpt.PRDT_BOOK_DATE <![CDATA[<=]]> to_date(#{endDate}, 'yyyy/MM/dd')
            </if>
        </where>
        )
        <if test="pageNum != null and pageSize != null">
            WHERE
            ROW_NUM <![CDATA[>=]]> ((#{pageNum} - 1) * #{pageSize}) + 1
            AND ROW_NUM <![CDATA[<=]]> (#{pageNum} * #{pageSize})
        </if>
    </select>

    <select id="getFundPrdtTotal" resultType="int">
        SELECT COUNT(*) FROM (
            SELECT rownum ROW_NUM, lpt.PRDT_BOOK_DATE, lpt.PRDT_RCP_AMT,
            lpt.PRDT_TARGET_LOADING  + lpt.PRDT_INCRE_LOADING PREMIUM_COST,
            NVL(lti.TRHI_INT, 0) - NVL(lti.TRHI_INT_TAX, 0) - NVL(lti.TRHI_SUPPLE_PREM, 0) INT_AMOUNT,
            lpt.PRDT_RCP_AMT PAID_AMOUNT
            FROM LIPRDT_ES lpt
        LEFT JOIN LITRHI_ES lti ON lpt.PRDT_INSU_NO = lti.TRHI_INSU_NO AND lti.TRHI_DATE = lpt.PRDT_BOOK_DATE
        <where>
            AND lpt.PRDT_INSU_NO = #{policyNo}
            <if test="startDate != null">
                AND lpt.PRDT_BOOK_DATE <![CDATA[>=]]> to_date(#{startDate}, 'yyyy/MM/dd')
            </if>
            <if test="endDate != null">
                AND lpt.PRDT_BOOK_DATE <![CDATA[<=]]> to_date(#{endDate}, 'yyyy/MM/dd')
            </if>
        </where>
        )
    </select>

    <select id="getExchangeRate" resultType="com.twfhclife.eservice.policy.model.ExchangeRateVo">
        SELECT INPR_TRAN_DATE effectiveDate, INPR_UNIT_PURPRICE buyPrice, INPR_UNIT_SOLPRICE sellPrice
        FROM LIINPR_ES
        <where>
            AND INPR_INVT_NO = #{exchangeRateVo.exchangeCode}
            <if test="exchangeRateVo.effectiveDate != null"> AND INPR_TRAN_DATE = #{exchangeRateVo.effectiveDate} </if>
            <if test="exchangeRateVo.queryType != null and exchangeRateVo.queryType == 'A'.toString()">
                AND INPR_TRAN_DATE >= add_months(SYSDATE, -1)
            </if>
            <if test="exchangeRateVo.queryType != null and exchangeRateVo.queryType == 'B'.toString()">
                AND INPR_TRAN_DATE >= add_months(SYSDATE, -3)
            </if>
            <if test="exchangeRateVo.queryType != null and exchangeRateVo.queryType == 'C'.toString()">
                AND to_char(INPR_TRAN_DATE, 'yyyy/MM') = #{exchangeRateVo.queryMonth}
            </if>
        </where>
        order by INPR_TRAN_DATE
    </select>

    <select id="getPortfolioList" resultType="com.twfhclife.eservice.policy.model.PortfolioVo">
        SELECT DISTINCT lir.INPR_UNIT_SOLPRICE netValueSell, lin.INVT_EXCH_CURR invtExchCurr, lir.INPR_TRAN_DATE_MAX netValueDate, lip.SAFP_NET_UNITS safpNetUnits, lip.SAFP_ACCU_INVEST_BFEXCH ownPval,
            lip.SAFP_AVG_PVAL avgPval, lin.INVT_RISK_BENE_LEVEL riskBeneLevel, lin.INVT_NO invtNo, lin.INVT_NAME invtName,
            lip.SAFP_INSU_NO policyNo, leh.EXCH_SPEBK_PURATE exchRateBuy, lcp.clupExpeNtdSum, lip.SAFP_NET_AMT safpNetAmt, lip.SAFP_AVG_PNTDVAL safpAvgPntdval
            FROM LISAFP_ES lip
            LEFT JOIN LIINVT_ES lin ON lip.SAFP_INVT_NO = lin.INVT_NO
            LEFT JOIN ( SELECT A.INPR_INVT_NO, B.INPR_TRAN_DATE_MAX, A.INPR_UNIT_SOLPRICE FROM LIINPR_ES A JOIN ( SELECT INPR_INVT_NO AS POLICY_NO, MAX(INPR_TRAN_DATE) INPR_TRAN_DATE_MAX FROM LIINPR_ES GROUP BY INPR_INVT_NO ) B ON A.INPR_INVT_NO = B.POLICY_NO AND A.INPR_TRAN_DATE = B.INPR_TRAN_DATE_MAX ) lir ON lir.INPR_INVT_NO = lip.SAFP_INVT_NO
            LEFT JOIN ( SELECT lef.EXCH_SPEBK_PURATE, lef.EXCH_EXCH_CODE FROM LIEXCH_ES lef INNER JOIN ( SELECT Max(EXCH_DATE) EXCH_DATE, EXCH_EXCH_CODE FROM LIEXCH_ES GROUP BY EXCH_EXCH_CODE ) lef1 ON lef.EXCH_DATE = lef1.EXCH_DATE AND lef.EXCH_EXCH_CODE = lef1.EXCH_EXCH_CODE) leh ON lin.INVT_EXCH_CURR = leh.EXCH_EXCH_CODE
            LEFT JOIN ( SELECT SUM(CLUP_EXPE_NTD) clupExpeNtdSum, CLUP_INSU_NO, CLUP_INVT_NO FROM LICLUP_ES GROUP BY CLUP_INSU_NO, CLUP_INVT_NO ) lcp
            ON lcp.CLUP_INVT_NO = lip.SAFP_INVT_NO AND lip.SAFP_INSU_NO = lcp.CLUP_INSU_NO WHERE lip.SAFP_INSU_NO  = #{policyNo}
    </select>

    <select id="selectPolicyAmount" resultType="com.twfhclife.eservice.api.shouxian.model.PolicyAmountVo">
        <![CDATA[
        SELECT decode(nvl(POEV_EXCH_DATE,''), '', '', to_char(POEV_EXCH_DATE, 'yyy/MM/dd', 'NLS_CALENDAR= ''ROC Official''')) policyDate, POEV_SAFP_UNITS * EXCH_SPEBK_PURATE * INPR_UNIT_SOLPRICE policyVal FROM
        (Select
        A.POEV_EXCH_DATE,
        SUBSTR(A.POEV_INVT_NO,3,3),
        A.POEV_INSU_NO,
        A.POEV_SAFP_UNITS,
        (select EXCH_SPEBK_PURATE from
        (select EXCH_DATE, EXCH_EXCH_CODE, EXCH_SPEBK_PURATE from LIEXCH_ES where EXCH_EXCH_CODE = SUBSTR(A.POEV_INVT_NO,3,3) order by EXCH_DATE DESC)
        WHERE ROWNUM < 2) as EXCH_SPEBK_PURATE,
        (select INPR_UNIT_SOLPRICE from
        (SELECT INPR_UNIT_SOLPRICE FROM LIINPR_ES WHERE INPR_INVT_NO = A.POEV_INVT_NO order by INPR_TRAN_DATE DESC)
        WHERE ROWNUM < 2) as INPR_UNIT_SOLPRICE
        from LIPOEV_ES A
        where A.POEV_INSU_NO = #{policyNo} order by A.POEV_EXCH_DATE DESC)
        WHERE ROWNUM < 2
        ]]>
    </select>

    <select id="selectPolicyTypeList" resultType="hashmap">
        SELECT SETT_INSU_TYPE AS VALUE, SETT_CH_NAME AS KEY FROM LISETT_ES ORDER BY SETT_CH_NAME
    </select>
</mapper>
